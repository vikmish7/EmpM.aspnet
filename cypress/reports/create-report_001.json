{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-06T08:49:59.250Z",
    "end": "2025-02-06T08:50:24.982Z",
    "duration": 25732,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "69528280-4d1e-4279-a82f-c81e90cc64ed",
      "title": "",
      "fullFile": "cypress\\e2e\\create.cy.js",
      "file": "cypress\\e2e\\create.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "219ff5a4-7040-4ae8-9127-6ca1fa430e4f",
          "title": "Employee Form Fields test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should load the form fields correctly",
              "fullTitle": "Employee Form Fields test should load the form fields correctly",
              "timedOut": null,
              "duration": 1433,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Replace with the actual route\ncy.visit('/Employee/Create');\n// Check if all fields are present\ncy.get('input[name=\"EmployeeName\"]').should('exist');\ncy.get('input[name=\"Designation\"]').should('exist');\ncy.get('input[name=\"NID\"]').should('exist');\ncy.get('input[name=\"JoiningDate\"]').should('exist');\ncy.get('select[name=\"DepartmentId\"]').should('exist');\ncy.get('select[name=\"BloodGroup\"]').should('exist');\ncy.get('input[type=\"submit\"]').should('exist');",
              "err": {},
              "uuid": "5900b876-7795-4e9f-a5cb-8a8ea909e8ee",
              "parentUUID": "219ff5a4-7040-4ae8-9127-6ca1fa430e4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5900b876-7795-4e9f-a5cb-8a8ea909e8ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1433,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b7f049f-3163-4c4f-a271-03cde91870c2",
          "title": "Red border for invalid input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should apply red border for invalid EmployeeName input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid EmployeeName input",
              "timedOut": null,
              "duration": 490,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').clear().blur();\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "9f2b9075-b572-4e75-9b7f-6e2c9e775b8c",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid Designation input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid Designation input",
              "timedOut": null,
              "duration": 667,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"Designation\"]').clear().type('1234').blur();\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "382b7875-69bd-499c-80b8-2f5636f016e3",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid NID input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid NID input",
              "timedOut": null,
              "duration": 672,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"NID\"]').clear().type('abcde').blur();\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "0fdf0115-9a6f-48c5-975e-a95d1e2b3c13",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid JoiningDate input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid JoiningDate input",
              "timedOut": null,
              "duration": 510,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input').blur();\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "c9eca084-f638-4902-955e-7e93eb224eed",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid DepartmentId selection",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid DepartmentId selection",
              "timedOut": null,
              "duration": 381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "91cec080-000b-44a4-aec1-0c7f75e67d96",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid BloodGroup selection",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid BloodGroup selection",
              "timedOut": null,
              "duration": 531,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('#BloodGroup').select('-Select-', {\n  force: true\n});\n// Validate if the border turns red (invalid selection)\ncy.get('#BloodGroup').closest('.form-group').should('have.css', 'border', '0px none rgb(51, 51, 51)');",
              "err": {},
              "uuid": "d2636449-e086-4f5c-8a8d-6b1ce726cd32",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for all invalid inputs",
              "fullTitle": "Red border for invalid input tests should apply red border for all invalid inputs",
              "timedOut": null,
              "duration": 1704,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create'); // Adjust the path to your form page\n// Trigger validation errors for Employee Name\ncy.get('input[name=\"EmployeeName\"]').clear().blur();\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)'); // Red border\n// Trigger validation errors for Designation\ncy.get('input[name=\"Designation\"]').clear().type('1234').blur(); // Invalid input: numbers\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for NID\ncy.get('input[name=\"NID\"]').clear().type('abcde').blur(); // Invalid input: non-numeric\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for Joining Date\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input').blur(); // Invalid date\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for Blood Group\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "a5d9af73-05a6-41b0-a89e-5af2e1f64880",
              "parentUUID": "9b7f049f-3163-4c4f-a271-03cde91870c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f2b9075-b572-4e75-9b7f-6e2c9e775b8c",
            "382b7875-69bd-499c-80b8-2f5636f016e3",
            "0fdf0115-9a6f-48c5-975e-a95d1e2b3c13",
            "c9eca084-f638-4902-955e-7e93eb224eed",
            "91cec080-000b-44a4-aec1-0c7f75e67d96",
            "d2636449-e086-4f5c-8a8d-6b1ce726cd32",
            "a5d9af73-05a6-41b0-a89e-5af2e1f64880"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4955,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
          "title": "Prevent form submission invalid input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent form submission when EmployeeName is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when EmployeeName is invalid",
              "timedOut": null,
              "duration": 2480,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Populate all fields with valid data except EmployeeName\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"EmployeeName\"]').clear(); // Empty value to trigger validation\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\n// Submit the form\ncy.get('form').submit();\n// Assert no POST request was made\ncy.wait(500); // Optional: wait a short time to ensure no request is made\ncy.get('@createEmployee.all').should('have.length', 0);",
              "err": {},
              "uuid": "dbbc4ef6-d026-40e4-be97-3b29f99be71e",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when Designation is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when Designation is invalid",
              "timedOut": null,
              "duration": 2467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Populate all fields with valid data except EmployeeName\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"Designation\"]').clear().type('1234'); // Invalid input\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "9bd6a09d-52c1-4d50-b04a-e05f9fad7b26",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when NID is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when NID is invalid",
              "timedOut": null,
              "duration": 2372,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"NID\"]').clear().type('abcde'); // Invalid input\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "42294773-c137-41d2-b9a6-7b30532bec86",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when JoiningDate is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when JoiningDate is invalid",
              "timedOut": null,
              "duration": 2115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input');\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "bdbc84a8-ca83-41d3-b28d-1b52fc9f609d",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when DepartmentId is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when DepartmentId is invalid",
              "timedOut": null,
              "duration": 2188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "ce9318f7-7b8c-4151-ad1a-40512d45bfb6",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when BloodGroup is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when BloodGroup is invalid",
              "timedOut": null,
              "duration": 2157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "f85a1f4f-068d-4c0d-a1b5-78c622b3b539",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent submission when all fields are invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent submission when all fields are invalid",
              "timedOut": null,
              "duration": 1912,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Intercept the GET request to fetch departments\ncy.intercept('GET', '/Employee/GetDepartments').as('getDepartments');\n// Wait for the departments data to load\ncy.wait('@getDepartments');\n// Ensure the department dropdown is populated\ncy.get('select[name=\"DepartmentId\"]').find('option').should('have.length.greaterThan', 1);\n// Fill out the form with invalid data\ncy.get('input[name=\"EmployeeName\"]').clear(); // Leave name empty\ncy.get('input[name=\"Designation\"]').clear().type('1234'); // Invalid designation (numeric)\ncy.get('input[name=\"NID\"]').clear().type('abcde'); // Invalid NID (non-numeric)\ncy.get('input[name=\"JoiningDate\"]').invoke('val', '2023-13-40').trigger('input');\n// Select invalid options for department and blood group\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\n// Try submitting the form\ncy.get('form').submit();\n// Assert validation styles on the wrapper element\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)'); // Red border on form-group\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"BloodGroup\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Assert that the form was not submitted (no POST request was made)\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500); // Give time to ensure no POST request happens\ncy.get('@createEmployee.all').should('have.length', 0); // Assert no requests were made",
              "err": {},
              "uuid": "40486795-6f89-46fa-a16f-3775a2db4644",
              "parentUUID": "0d1b3f44-4540-4c7e-a10b-5e94b2b609b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbbc4ef6-d026-40e4-be97-3b29f99be71e",
            "9bd6a09d-52c1-4d50-b04a-e05f9fad7b26",
            "42294773-c137-41d2-b9a6-7b30532bec86",
            "bdbc84a8-ca83-41d3-b28d-1b52fc9f609d",
            "ce9318f7-7b8c-4151-ad1a-40512d45bfb6",
            "f85a1f4f-068d-4c0d-a1b5-78c622b3b539",
            "40486795-6f89-46fa-a16f-3775a2db4644"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15691,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e955599d-3f25-4bbb-babf-c72d5639244d",
          "title": "Form submission Good case input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow submission when all fields are valid",
              "fullTitle": "Form submission Good case input tests should allow submission when all fields are valid",
              "timedOut": null,
              "duration": 2454,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Intercept the GET request to fetch departments\ncy.intercept('GET', '/Employee/GetDepartments').as('getDepartments');\n// Wait for the departments data to load\ncy.wait('@getDepartments');\n// Ensure the department dropdown is populated\ncy.get('select[name=\"DepartmentId\"]').find('option').should('have.length.greaterThan', 1);\n// Fill out the form with valid data\ncy.get('input[name=\"EmployeeName\"]').clear().type('Manny Doe'); // Valid name\ncy.get('input[name=\"Designation\"]').clear().type('Manager'); // Valid designation\ncy.get('input[name=\"NID\"]').clear().type('123456789'); // Valid NID\ncy.get('input[name=\"JoiningDate\"]').clear().type('2023-01-01'); // Valid joining date\n// Select valid options for department and blood group\ncy.get('select[name=\"DepartmentId\"]').select('Information Technology', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(200); // Give time to ensure no POST request happens\ncy.get('@createEmployee.all').should('have.length', 0); // Assert no requests were made // Example success message",
              "err": {},
              "uuid": "46a55722-a1a2-4e58-a28c-d819f11bfc9c",
              "parentUUID": "e955599d-3f25-4bbb-babf-c72d5639244d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46a55722-a1a2-4e58-a28c-d819f11bfc9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2454,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "[name]-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}