{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-31T14:57:40.221Z",
    "end": "2025-01-31T14:58:03.223Z",
    "duration": 23002,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "54ccd7fb-2b81-448c-aef2-289efdeed0d2",
      "title": "",
      "fullFile": "cypress\\e2e\\create.cy.js",
      "file": "cypress\\e2e\\create.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c668ebb4-1afb-4492-80aa-a75bef5e0ac2",
          "title": "Employee Form Fields test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should load the form fields correctly",
              "fullTitle": "Employee Form Fields test should load the form fields correctly",
              "timedOut": null,
              "duration": 1007,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Replace with the actual route\ncy.visit('/Employee/Create');\n// Check if all fields are present\ncy.get('input[name=\"EmployeeName\"]').should('exist');\ncy.get('input[name=\"Designation\"]').should('exist');\ncy.get('input[name=\"NID\"]').should('exist');\ncy.get('input[name=\"JoiningDate\"]').should('exist');\ncy.get('select[name=\"DepartmentId\"]').should('exist');\ncy.get('select[name=\"BloodGroup\"]').should('exist');\ncy.get('input[type=\"submit\"]').should('exist');",
              "err": {},
              "uuid": "adfce0c9-0e56-416f-be4c-bba6d2f58a60",
              "parentUUID": "c668ebb4-1afb-4492-80aa-a75bef5e0ac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "adfce0c9-0e56-416f-be4c-bba6d2f58a60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1007,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34798c9f-6714-4a1e-9992-7c08962ffa96",
          "title": "Red border for invalid input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should apply red border for invalid EmployeeName input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid EmployeeName input",
              "timedOut": null,
              "duration": 537,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').clear().blur();\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "2ac639db-d2d3-482d-bee5-9566d9c5d161",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid Designation input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid Designation input",
              "timedOut": null,
              "duration": 457,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"Designation\"]').clear().type('1234').blur();\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "59a7faae-bd43-41c6-b068-fe4d1bd61782",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid NID input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid NID input",
              "timedOut": null,
              "duration": 456,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"NID\"]').clear().type('abcde').blur();\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "d01c55f2-8c77-4b96-9d9e-36315438fbb1",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid JoiningDate input",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid JoiningDate input",
              "timedOut": null,
              "duration": 379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input').blur();\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "a0d15aa0-190b-4820-85bd-14f127685489",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid DepartmentId selection",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid DepartmentId selection",
              "timedOut": null,
              "duration": 312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "d2862750-32c3-40f8-86c4-3c5f5c2b5a30",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for invalid BloodGroup selection",
              "fullTitle": "Red border for invalid input tests should apply red border for invalid BloodGroup selection",
              "timedOut": null,
              "duration": 324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('#BloodGroup').select('-Select-', {\n  force: true\n});\n// Validate if the border turns red (invalid selection)\ncy.get('#BloodGroup').closest('.form-group').should('have.css', 'border', '0px none rgb(51, 51, 51)');",
              "err": {},
              "uuid": "0bb0392e-4692-4ff3-9c24-f81e4cfec999",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply red border for all invalid inputs",
              "fullTitle": "Red border for invalid input tests should apply red border for all invalid inputs",
              "timedOut": null,
              "duration": 1522,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create'); // Adjust the path to your form page\n// Trigger validation errors for Employee Name\ncy.get('input[name=\"EmployeeName\"]').clear().blur();\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)'); // Red border\n// Trigger validation errors for Designation\ncy.get('input[name=\"Designation\"]').clear().type('1234').blur(); // Invalid input: numbers\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for NID\ncy.get('input[name=\"NID\"]').clear().type('abcde').blur(); // Invalid input: non-numeric\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for Joining Date\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input').blur(); // Invalid date\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Trigger validation errors for Blood Group\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');",
              "err": {},
              "uuid": "63b1caa1-2697-4344-a36d-92214076c7a3",
              "parentUUID": "34798c9f-6714-4a1e-9992-7c08962ffa96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ac639db-d2d3-482d-bee5-9566d9c5d161",
            "59a7faae-bd43-41c6-b068-fe4d1bd61782",
            "d01c55f2-8c77-4b96-9d9e-36315438fbb1",
            "a0d15aa0-190b-4820-85bd-14f127685489",
            "d2862750-32c3-40f8-86c4-3c5f5c2b5a30",
            "0bb0392e-4692-4ff3-9c24-f81e4cfec999",
            "63b1caa1-2697-4344-a36d-92214076c7a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3987,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
          "title": "Prevent form submission invalid input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent form submission when EmployeeName is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when EmployeeName is invalid",
              "timedOut": null,
              "duration": 2153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Populate all fields with valid data except EmployeeName\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"EmployeeName\"]').clear(); // Empty value to trigger validation\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\n// Submit the form\ncy.get('form').submit();\n// Assert no POST request was made\ncy.wait(500); // Optional: wait a short time to ensure no request is made\ncy.get('@createEmployee.all').should('have.length', 0);",
              "err": {},
              "uuid": "5c6c00be-f420-48ff-b1df-622334f3b57c",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when Designation is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when Designation is invalid",
              "timedOut": null,
              "duration": 2072,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Populate all fields with valid data except EmployeeName\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"Designation\"]').clear().type('1234'); // Invalid input\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "7bbb3011-2027-424b-b749-699a31787265",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when NID is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when NID is invalid",
              "timedOut": null,
              "duration": 2249,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"NID\"]').clear().type('abcde'); // Invalid input\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "14a3f196-364d-452c-91e8-b0d9f0c39101",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when JoiningDate is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when JoiningDate is invalid",
              "timedOut": null,
              "duration": 2077,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('input[name=\"JoiningDate\"]').clear().invoke('val', '2023-13-40').trigger('input');\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "1b3418d6-3f94-474d-b604-0a0f62e6c674",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when DepartmentId is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when DepartmentId is invalid",
              "timedOut": null,
              "duration": 2167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n}); // Assuming 'A+' is valid\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "8baa1fb9-719c-43bd-aed0-539b17450a26",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent form submission when BloodGroup is invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent form submission when BloodGroup is invalid",
              "timedOut": null,
              "duration": 2144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\ncy.get('input[name=\"EmployeeName\"]').type('Manny Doe');\ncy.get('input[name=\"Designation\"]').type('Valid Designation');\ncy.get('input[name=\"NID\"]').type('123456');\ncy.get('input[name=\"JoiningDate\"]').type('2023-12-31');\ncy.get('select[name=\"DepartmentId\"]').select('1', {\n  force: true\n}); // Assuming '1' is a valid option\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500);\ncy.get('@createEmployee.all').should('have.length', 0); // No POST request",
              "err": {},
              "uuid": "33e1da07-3de7-498a-92e5-d156de5872bb",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent submission when all fields are invalid",
              "fullTitle": "Prevent form submission invalid input tests should prevent submission when all fields are invalid",
              "timedOut": null,
              "duration": 1899,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Intercept the GET request to fetch departments\ncy.intercept('GET', '/Employee/GetDepartments').as('getDepartments');\n// Wait for the departments data to load\ncy.wait('@getDepartments');\n// Ensure the department dropdown is populated\ncy.get('select[name=\"DepartmentId\"]').find('option').should('have.length.greaterThan', 1);\n// Fill out the form with invalid data\ncy.get('input[name=\"EmployeeName\"]').clear(); // Leave name empty\ncy.get('input[name=\"Designation\"]').clear().type('1234'); // Invalid designation (numeric)\ncy.get('input[name=\"NID\"]').clear().type('abcde'); // Invalid NID (non-numeric)\ncy.get('input[name=\"JoiningDate\"]').invoke('val', '2023-13-40').trigger('input');\n// Select invalid options for department and blood group\ncy.get('select[name=\"DepartmentId\"]').select('-Select-', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').select('-Select-', {\n  force: true\n});\n// Try submitting the form\ncy.get('form').submit();\n// Assert validation styles on the wrapper element\ncy.get('input[name=\"EmployeeName\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)'); // Red border on form-group\ncy.get('input[name=\"Designation\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('input[name=\"NID\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('input[name=\"JoiningDate\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"DepartmentId\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\ncy.get('select[name=\"BloodGroup\"]').closest('.form-group').should('have.css', 'border', '1px solid rgb(255, 0, 0)');\n// Assert that the form was not submitted (no POST request was made)\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(500); // Give time to ensure no POST request happens\ncy.get('@createEmployee.all').should('have.length', 0); // Assert no requests were made",
              "err": {},
              "uuid": "537d3bd8-e248-4a52-ad11-ca4aa92cf80b",
              "parentUUID": "72f7e79c-debd-45e2-8e44-2bcc7fc88821",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c6c00be-f420-48ff-b1df-622334f3b57c",
            "7bbb3011-2027-424b-b749-699a31787265",
            "14a3f196-364d-452c-91e8-b0d9f0c39101",
            "1b3418d6-3f94-474d-b604-0a0f62e6c674",
            "8baa1fb9-719c-43bd-aed0-539b17450a26",
            "33e1da07-3de7-498a-92e5-d156de5872bb",
            "537d3bd8-e248-4a52-ad11-ca4aa92cf80b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14761,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "708c705d-d26f-41df-ae16-eed0bacab8ac",
          "title": "Form submission Good case input tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow submission when all fields are valid",
              "fullTitle": "Form submission Good case input tests should allow submission when all fields are valid",
              "timedOut": null,
              "duration": 2346,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee/Create');\n// Intercept the GET request to fetch departments\ncy.intercept('GET', '/Employee/GetDepartments').as('getDepartments');\n// Wait for the departments data to load\ncy.wait('@getDepartments');\n// Ensure the department dropdown is populated\ncy.get('select[name=\"DepartmentId\"]').find('option').should('have.length.greaterThan', 1);\n// Fill out the form with valid data\ncy.get('input[name=\"EmployeeName\"]').clear().type('Manny Doe'); // Valid name\ncy.get('input[name=\"Designation\"]').clear().type('Manager'); // Valid designation\ncy.get('input[name=\"NID\"]').clear().type('123456789'); // Valid NID\ncy.get('input[name=\"JoiningDate\"]').clear().type('2023-01-01'); // Valid joining date\n// Select valid options for department and blood group\ncy.get('select[name=\"DepartmentId\"]').select('Information Technology', {\n  force: true\n});\ncy.get('select[name=\"BloodGroup\"]').select('A+', {\n  force: true\n});\ncy.get('form').submit();\ncy.intercept('POST', '/Employee/Create').as('createEmployee');\ncy.wait(200); // Give time to ensure no POST request happens\ncy.get('@createEmployee.all').should('have.length', 0); // Assert no requests were made // Example success message",
              "err": {},
              "uuid": "efc1cacb-4182-419f-849d-9eb5de2c7ee7",
              "parentUUID": "708c705d-d26f-41df-ae16-eed0bacab8ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "efc1cacb-4182-419f-849d-9eb5de2c7ee7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2346,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "[name]-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}