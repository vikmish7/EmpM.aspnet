{
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 1,
    "pending": 0,
    "failures": 3,
    "start": "2025-01-22T11:49:28.295Z",
    "end": "2025-01-22T11:49:44.232Z",
    "duration": 15937,
    "testsRegistered": 4,
    "passPercent": 25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "413b49a9-28d6-4509-8254-37779cf63f3a",
      "title": "",
      "fullFile": "cypress\\e2e\\loader-edit.cy.js",
      "file": "cypress\\e2e\\loader-edit.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "85adcf95-8f6e-4c47-97da-7e4804977ed3",
          "title": "Employee Table Loader",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display loader and then show the table",
              "fullTitle": "Employee Table Loader should display loader and then show the table",
              "timedOut": null,
              "duration": 2649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee'); // Adjust the route as per your app\n// Loader should be visible initially\ncy.get('#loader').should('be.visible');\n// Loader should disappear and table should be visible after 1.5 seconds\n// cy.wait(1800); // Adjust the wait time to match your loader timeout\n// cy.get('#loader', { timeout: 6000 }).should('have.css', 'display', 'none');\ncy.get('#loader', {\n  timeout: 6000\n}).should('not.be.visible') // Checks visibility\n.and('have.css', 'display', 'none'); // Checks display property\n// cy.get('#loader').should('not.exist');\ncy.get('#employeeTable').should('be.visible');",
              "err": {},
              "uuid": "a8e42b63-9e1d-44b1-87cc-33554e77d02a",
              "parentUUID": "85adcf95-8f6e-4c47-97da-7e4804977ed3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8e42b63-9e1d-44b1-87cc-33554e77d02a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2649,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "890c176a-cd0b-4e38-a999-e493feab1648",
          "title": "Edit Button Functionality",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should toggle view and edit modes when Edit is clicked",
              "fullTitle": "Edit Button Functionality should toggle view and edit modes when Edit is clicked",
              "timedOut": null,
              "duration": 4430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee');\n// Click the Edit button on the first row\ncy.get('#employeeTable tbody tr').first().within(() => {\n  cy.get('.edit-btn').click();\n  // Verify view-mode is hidden and edit-mode is visible\n  cy.get('.view-mode').should('not.be.visible');\n  cy.get('.edit-mode').should('be.visible');\n  // Verify Save button is visible\n  cy.get('.save-btn').should('be.visible');\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#employeeTable tbody tr`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#employeeTable tbody tr`, but never found it.\n    at Context.eval (webpack://empm.aspnet/./cypress/e2e/loader-edit.cy.js:32:7)",
                "diff": null
              },
              "uuid": "52af8f42-a9a9-4ed5-9881-0cccca8dee36",
              "parentUUID": "890c176a-cd0b-4e38-a999-e493feab1648",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "52af8f42-a9a9-4ed5-9881-0cccca8dee36"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4430,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cd3239a1-fa06-4849-88c6-d165310ee497",
          "title": "Save Employee Data",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should simulate employee details update without making an actual API call",
              "fullTitle": "Save Employee Data should simulate employee details update without making an actual API call",
              "timedOut": null,
              "duration": 4373,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee'); // Replace with your app's route\n// Interact with the form to edit employee details\ncy.get('.edit-btn').first().click();\n// Use the 'input' selectors by the 'class' or 'type' to interact with the fields\ncy.get('input.edit-mode').eq(0).clear().type('Updated Name'); // Employee Name\ncy.get('input.edit-mode').eq(1).clear().type('Updated Designation'); // Designation\n// Set up intercept for the POST request to mock the response\ncy.intercept('POST', '/Employee/Edit', {\n  statusCode: 200,\n  // Simulate a successful response\n  body: {\n    status: 'success',\n    message: 'Employee updated successfully'\n  }\n}).as('editEmployee');\n// Click the save button to simulate saving the changes\ncy.get('.save-btn').first().click();\n// Wait for the mocked API call\ncy.wait('@editEmployee').then(({\n  request,\n  response\n}) => {\n  console.log('Actual request body:', request.body);\n  // Assert that the request payload contains the correct values\n  // expect(request.body).to.have.property('EmployeeName', 'Updated Name');\n  // expect(request.body).to.have.property('Designation', 'Updated Designation');\n  expect(request.body).to.include({\n    EmployeeName: 'Updated Name',\n    Designation: 'Updated Designation'\n  });\n  // Assert that the mocked response is successful\n  expect(response.body.status).to.eq('success');\n  cy.get('.view-mode').eq(0).invoke('text', 'Updated Name');\n  cy.get('.view-mode').eq(1).invoke('text', 'Updated Designation');\n});\ncy.get('.view-mode').eq(0).should('contain', 'Updated Name'); // Check updated name\ncy.get('.view-mode').eq(1).should('contain', 'Updated Designation'); // Check",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.edit-btn`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.edit-btn`, but never found it.\n    at Context.eval (webpack://empm.aspnet/./cypress/e2e/loader-edit.cy.js:85:7)",
                "diff": null
              },
              "uuid": "3e5380f4-6f99-4ec5-b694-e08f798d0a3f",
              "parentUUID": "cd3239a1-fa06-4849-88c6-d165310ee497",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3e5380f4-6f99-4ec5-b694-e08f798d0a3f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4373,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b3e48a2-f7cd-45d6-93d2-0eb97b2eebce",
          "title": "Save Button Error Handling",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display an error message on failed save",
              "fullTitle": "Save Button Error Handling should display an error message on failed save",
              "timedOut": null,
              "duration": 4333,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit('/Employee');\n// Wait for the table to load\n// Intercept the AJAX call to simulate a failure\ncy.intercept('POST', '/Employee/Edit', {\n  statusCode: 500\n}).as('saveEmployee');\n// Click the Edit button\ncy.get('#employeeTable tbody tr').first().within(() => {\n  cy.get('.edit-btn').click();\n  // Update the employee name\n  cy.get('input').first().clear().type('Updated Name');\n});\n// Click the Save button after setting up the intercept\ncy.get('#employeeTable tbody tr').first().within(() => {\n  cy.get('.save-btn').click();\n});\n// Verify that the AJAX request was made\ncy.wait('@saveEmployee');\n// Verify error alert is shown\ncy.on('window:alert', str => {\n  expect(str).to.equal('Error updating employee details.');\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#employeeTable tbody tr`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#employeeTable tbody tr`, but never found it.\n    at Context.eval (webpack://empm.aspnet/./cypress/e2e/loader-edit.cy.js:135:7)",
                "diff": null
              },
              "uuid": "b1ae9fd8-c34d-4af0-98e2-039bb2481549",
              "parentUUID": "6b3e48a2-f7cd-45d6-93d2-0eb97b2eebce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b1ae9fd8-c34d-4af0-98e2-039bb2481549"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4333,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-20250122171842",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "test-20250122171842"
      },
      "version": "6.2.0"
    }
  }
}